#if !defined( UNIC_INT_FAST64_C ) && UNIC_CAN_MAP_AT_LEAST_64BIT
#include "_.h"

/* Since these macros can function as fallbacks check for originals 1st */

#ifdef INT_FAST64_MAX
# define UNIC_INT_FAST64_MAX INT_FAST64_MAX
#elif UNIC_INT_WIDTH >= 64
# define UNIC_INT_FAST64_MAX UNIC_INT_MAX
#elif UNIC_LONG_WIDTH >= 64
# define UNIC_INT_FAST64_MAX UNIC_LONG_MAX
#else
# define UNIC_INT_FAST64_MAX UNIC_LLONG_MAX
#endif

#ifdef INT_FAST64_MIN
# define UNIC_INT_FAST64_MIN INT_FAST64_MIN
#else
# define UNIC_INT_FAST64_MIN UNIC___MIN(UNIC_INT_FAST64_MAX)
#endif

#ifdef INT_FAST64_END_BIT
# define UNIC_INT_FAST64_END_BIT INT_FAST64_END_BIT
#else
# define UNIC_INT_FAST64_END_BIT UNIC_INT_FAST64_MIN
#endif

#ifdef SIZEOF_SIZE
# define UNIC_SIZEOF_INT_FAST64 SIZEOF_INT_FAST64
#else
# define UNIC_SIZEOF_INT_FAST64 SIZEOF_BY_IMAX(INT_FAST64_MAX)
#endif

#ifdef INT_FAST64_WIDTH
# define UNIC_INT_FAST64_WIDTH INT_FAST64_WIDTH
#else
# define UNIC_INT_FAST64_WIDTH (UNIC_SIZEOF_INT_FAST64 * UNIC_CHAR_BIT)
#endif

#ifdef INT_FAST64_TYPE
# define UNIC_INT_FAST64_TYPE INT_FAST64_TYPE
#elif UNIC_INT_WIDTH >= 64
# define UNIC_INT_FAST64_TYPE signed int
#elif UNIC_LONG_WIDTH >= 64
# define UNIC_INT_FAST64_TYPE signed long int
#else
# define UNIC_INT_FAST64_TYPE signed long long int
#endif

typedef UNIC_INT_FAST64_TYPE unic_int_fast64_t;

#ifdef INT_FAST64_C
# define UNIC_INT_FAST64_C INT_FAST64_C
#elif UNIC_INT_WIDTH >= 64
# define UNIC_INT_FAST64_C(VAL) VAL
#elif UNIC_LONG_WIDTH >= 64
# define UNIC_INT_FAST64_C(VAL) VAL##L
#else
# define UNIC_INT_FAST64_C(VAL) VAL##LL
#endif

#ifdef PRI_INT_FAST64
# define UNIC_PRI_INT_FAST64 PRI_INT_FAST64
#elif UNIC_INT_WIDTH >= 64
# define UNIC_PRI_INT_FAST64
#elif UNIC_LONG_WIDTH >= 64
# define UNIC_PRI_INT_FAST64 "l"
#else
# define UNIC_PRI_INT_FAST64 "ll"
#endif

#ifdef SCN_INT_FAST64
# define UNIC_SCN_INT_FAST64 SCN_INT_FAST64
#elif UNIC_INT_WIDTH >= 64
# define UNIC_SCN_INT_FAST64
#elif UNIC_LONG_WIDTH >= 64
# define UNIC_SCN_INT_FAST64 "l"
#else
# define UNIC_SCN_INT_FAST64 "ll"
#endif

#define UNIC_PRIiINT_FAST64 UNIC_PRI_INT_FAST64 "i"
#define UNIC_PRIoINT_FAST64 UNIC_PRI_INT_FAST64 "o"
#define UNIC_PRIuINT_FAST64 UNIC_PRI_INT_FAST64 "u"
#define UNIC_PRIxINT_FAST64 UNIC_PRI_INT_FAST64 "x"
#define UNIC_PRIXINT_FAST64 UNIC_PRI_INT_FAST64 "X"

#define UNIC_SCNiINT_FAST64 UNIC_SCN_INT_FAST64 "i"
#define UNIC_SCNoINT_FAST64 UNIC_SCN_INT_FAST64 "o"
#define UNIC_SCNuINT_FAST64 UNIC_SCN_INT_FAST64 "u"
#define UNIC_SCNxINT_FAST64 UNIC_SCN_INT_FAST64 "x"
#define UNIC_SCNXINT_FAST64 UNIC_SCN_INT_FAST64 "X"

#ifdef UNIC_FALLBACK

# ifndef __int_fast64_t_defined
#  define __int_fast64_t_defined
typedef unic_int_fast64_t int_fast64_t;
# endif

#ifndef INT_FAST64_MAX
# define INT_FAST64_MAX UNIC_INT_FAST64_MAX
#endif

#ifndef INT_FAST64_MIN
# define INT_FAST64_MIN UNIC_INT_FAST64_MIN
#endif

#ifndef SIZEOF_INT_FAST64
# define SIZEOF_INT_FAST64 UNIC_SIZEOF_INT_FAST64
#endif

#ifndef INT_FAST64_WIDTH
# define INT_FAST64_WIDTH UNIC_INT_FAST64_WIDTH
#endif

#ifndef INT_FAST64_TYPE
# define INT_FAST64_TYPE UNIC_INT_FAST64_TYPE
#endif

#ifndef INT_FAST64_C
# define INT_FAST64_C UNIC_INT_FAST64_C
#endif

#ifndef PRIxINT_FAST64
# define PRIiINT_FAST64 UNIC_PRIiINT_FAST64
# define PRIoINT_FAST64 UNIC_PRIoINT_FAST64
# define PRIuINT_FAST64 UNIC_PRIuINT_FAST64
# define PRIxINT_FAST64 UNIC_PRIxINT_FAST64
# define PRIXINT_FAST64 UNIC_PRIXINT_FAST64
#endif

#ifndef SCNxINT_FAST64
# define SCNiINT_FAST64 UNIC_SCNiINT_FAST64
# define SCNoINT_FAST64 UNIC_SCNoINT_FAST64
# define SCNuINT_FAST64 UNIC_SCNuINT_FAST64
# define SCNxINT_FAST64 UNIC_SCNxINT_FAST64
# define SCNXINT_FAST64 UNIC_SCNXINT_FAST64
#endif

#endif /* UNIC_FALLBACK */

#endif
