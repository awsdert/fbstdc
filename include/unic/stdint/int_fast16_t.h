#if !defined( UNIC_INT_FAST16_C ) && UNIC_CAN_MAP_AT_LEAST_16BIT
#include "uint_fast16_t.h"

/* Since these macros can function as fallbacks check for originals 1st */

#ifdef INT_FAST16_MAX
# define UNIC_INT_FAST16_MAX INT_FAST16_MAX
#else
# define UNIC_INT_FAST16_MAX UNIC_SHRT_MAX
#endif

#ifdef INT_FAST16_MIN
# define UNIC_INT_FAST16_MIN INT_FAST16_MIN
#else
# define UNIC_INT_FAST16_MIN UNIC___MIN(UNIC_INT_FAST16_MAX)
#endif

#ifdef INT_FAST16_END_BIT
# define UNIC_INT_FAST16_END_BIT INT_FAST16_END_BIT
#else
# define UNIC_INT_FAST16_END_BIT UNIC_INT_FAST16_MIN
#endif

#ifdef SIZEOF_SIZE
# define UNIC_SIZEOF_INT_FAST16 SIZEOF_INT_FAST16
#else
# define UNIC_SIZEOF_INT_FAST16 SIZEOF_BY_IMAX(INT_FAST16_MAX)
#endif

#ifdef INT_FAST16_WIDTH
# define UNIC_INT_FAST16_WIDTH INT_FAST16_WIDTH
#else
# define UNIC_INT_FAST16_WIDTH (UNIC_SIZEOF_INT_FAST16 * UNIC_CHAR_BIT)
#endif

#ifdef INT_FAST16_TYPE
# define UNIC_INT_FAST16_TYPE INT_FAST16_TYPE
#else
# define UNIC_INT_FAST16_TYPE signed short int
#endif

typedef UNIC_INT_FAST16_TYPE unic_int_fast16_t;

#ifdef INT_FAST16_C
# define UNIC_INT_FAST16_C INT_FAST16_C
#elif UNIC_INT_FAST16_MAX == UNIC_INT_MAX
#else
# define UNIC_INT_FAST16_C(VAL) VAL
#endif

#ifdef PRI_INT_FAST16
# define UNIC_PRI_INT_FAST16 PRI_INT_FAST16
#else
# define UNIC_PRI_INT_FAST16
#endif

#ifdef SCN_INT_FAST16
# define UNIC_SCN_INT_FAST16 SCN_INT_FAST16
#else
# define UNIC_SCN_INT_FAST16 "h"
#endif

#define UNIC_PRIiINT_FAST16 UNIC_PRI_INT_FAST16 "i"
#define UNIC_PRIoINT_FAST16 UNIC_PRI_INT_FAST16 "o"
#define UNIC_PRIuINT_FAST16 UNIC_PRI_INT_FAST16 "u"
#define UNIC_PRIxINT_FAST16 UNIC_PRI_INT_FAST16 "x"
#define UNIC_PRIXINT_FAST16 UNIC_PRI_INT_FAST16 "X"

#define UNIC_SCNiINT_FAST16 UNIC_SCN_INT_FAST16 "i"
#define UNIC_SCNoINT_FAST16 UNIC_SCN_INT_FAST16 "o"
#define UNIC_SCNuINT_FAST16 UNIC_SCN_INT_FAST16 "u"
#define UNIC_SCNxINT_FAST16 UNIC_SCN_INT_FAST16 "x"
#define UNIC_SCNXINT_FAST16 UNIC_SCN_INT_FAST16 "X"

#ifdef UNIC_FALLBACK

#ifndef INT_FAST16_MAX
typedef unic_int_fast16_t int_fast16_t;
typedef unic_uint_fast16_t uint_fast16_t;
# define INT_FAST16_MAX UNIC_INT_FAST16_MAX
/* UINT_FAST16_MAX will already be defined in uint_fast16_t.h */
#endif

# ifndef INT_FAST16_C
# define INT_FAST16_C UNIC_INT_FAST16_C
#endif

#ifndef INT_FAST16_MAX
# define INT_FAST16_MAX UNIC_INT_FAST16_MAX
#endif

#ifndef INT_FAST16_MIN
# define INT_FAST16_MIN UNIC_INT_FAST16_MIN
#endif

#ifndef SIZEOF_INT_FAST16
# define SIZEOF_INT_FAST16 UNIC_SIZEOF_INT_FAST16
#endif

#ifndef INT_FAST16_WIDTH
# define INT_FAST16_WIDTH UNIC_INT_FAST16_WIDTH
#endif

#ifndef INT_FAST16_TYPE
# define INT_FAST16_TYPE UNIC_INT_FAST16_TYPE
#endif

#ifndef PRIxINT_FAST16
# define PRIiINT_FAST16 UNIC_PRIiINT_FAST16
# define PRIoINT_FAST16 UNIC_PRIoINT_FAST16
# define PRIuINT_FAST16 UNIC_PRIuINT_FAST16
# define PRIxINT_FAST16 UNIC_PRIxINT_FAST16
# define PRIXINT_FAST16 UNIC_PRIXINT_FAST16
#endif

#ifndef SCNxINT_FAST16
# define SCNiINT_FAST16 UNIC_SCNiINT_FAST16
# define SCNoINT_FAST16 UNIC_SCNoINT_FAST16
# define SCNuINT_FAST16 UNIC_SCNuINT_FAST16
# define SCNxINT_FAST16 UNIC_SCNxINT_FAST16
# define SCNXINT_FAST16 UNIC_SCNXINT_FAST16
#endif

#endif /* UNIC_FALLBACK */

#endif
